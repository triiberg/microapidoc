package microapidoc

import (
	"os"

	"github.com/gin-gonic/gin"
)

func (c *Microapidoc) DocIndexHAndler(ctx *gin.Context) {

	filePath := "./index.html"
	indexHtml, err := os.ReadFile(filePath)
	if err != nil {
		ctx.String(500, "Failed to read index HTML file: %v", err)
		return
	}
	ctx.Data(200, "text/html; charset=utf-8", []byte(indexHtml))
	return

	/*
		indexB64 := ``

		decodedIndexHtml, err := base64.StdEncoding.DecodeString(indexB64)
		if err != nil {
			ctx.String(500, "Failed to decode index HTML: %v", err)
			return
		}
		indexHtml := string(decodedIndexHtml)

		ctx.Data(200, "text/html; charset=utf-8", []byte(indexHtml))
		return

	*/
}
